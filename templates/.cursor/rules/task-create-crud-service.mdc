---
description: Crud服务
globs: 
alwaysApply: false
---
# Crud服务

如果没有阅读`docs/类结构.md`，请先阅读`docs/类结构.md`。

## 领域层步骤

如果没有建立实体类，那么请先根据`ai/增加实体类.md`建立实体类。

## EF Core层步骤

如果没有增加实体类的DbSet属性，那么请先根据`ai/增加实体类.md`增加实体类的DbSet属性。

## 应用服务接口与DTO层步骤

1. 每一个服务使用一个文件夹，相关文件都放在文件夹中。
2. 确定服务文件夹名称，将输入的实体类名称翻译为英文，如果是单数形式，将其转换为复数形式。建立服务文件夹。
3. 确定应用服务层接口名称，将输入的实体类名称翻译为英文，如果是复数形式，将其转换为单数形式。确定应用服务层接口名称为`I`+实体类名称+`AppService`。
4. 确定DTO文件夹，在服务文件夹中建立DTO文件夹，文件夹名称为`Dtos`。
5. 确定实体DTO名称，格式为：实体类名称+`Dto`。
6. 在DTO文件夹中，建立实体DTO文件，文件名称为实体DTO名称。文件内容为:
    ```csharp
    public class 实体DTO : EntityDto<主键>
    {
        // DTO属性
    }
    ```
    根据DTO文件夹路径补充命名空间，自动添加引用。
7. 在服务文件夹中，建立应用服务层接口文件，文件名称使用应用服务层接口名称。文件内容为：
    ```csharp
    public interface I实体类名称AppService : ICrudAppService<实体DTO, 主键>, ITransientDependency
    {
        // 接口方法
    }
    ```
    根据服务文件夹路径补充命名空间，自动添加引用。


## 应用服务层步骤

1. 每一个服务使用一个文件夹，相关文件都放在文件夹中。
2. 确定服务文件夹名称，将输入的实体类名称翻译为英文，如果是单数形式，将其转换为复数形式。建立服务文件夹。
3. 确定应用服务名称，将输入的实体类名称翻译为英文，如果是复数形式，将其转换为单数形式。确定应用服务名称为`实体类名称`+`AppService`。
4. 在服务文件夹中，建立应用服务文件，文件名称使用应用服务名称。
6. 在应用服务文件中，实现应用服务接口。实现代码:
   ```csharp
   public class 实体类名称AppService : CrudAppService<实体类名称, 实体类DTO, 主键>, I实体类名称AppService
   {
       public 实体类名称AppService(IRepository<实体类名称, 主键> repository) : base(repository)
       {
       }
   }
   ```
   根据服务文件夹路径补充命名空间，自动添加引用, 添加注释说明。
7. 在应用服务层找到AutoMapper配置，不要删除原来的内容，仅仅新增实体类映射配置。默认情况下添加映射配置:
   ```csharp
   CreateMap<实体类名称, 实体类DTO>(MemberList.Destination);
   CreateMap<实体类DTO，实体类名称>(MemberList.Source);
   ```   
   映射代码在构造函数中，构造函数不存在的话，需要添加构造函数。
   对映射方法添加注释，使用Region包围代码。
